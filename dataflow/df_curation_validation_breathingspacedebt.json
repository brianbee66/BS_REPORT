{
	"name": "df_curation_validation_breathingspacedebt",
	"properties": {
		"folder": {
			"name": "Transform/BSS/Moratoriums"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adlsfs_parquet",
						"type": "DatasetReference"
					},
					"name": "sourceStaging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adlsfs_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkValidation"
				}
			],
			"transformations": [
				{
					"name": "decolTypeConvertion"
				},
				{
					"name": "dcolIsValid"
				},
				{
					"name": "dcolMandatoryValue"
				},
				{
					"name": "dcolIsTruncate"
				},
				{
					"name": "dcolMandatoryTruncate"
				}
			],
			"script": "source(output(\n\t\tstatecode as string,\n\t\tntt_referencenumber as string,\n\t\tcreatedon as string,\n\t\tntt_triggercreditorsubmitnotification as string,\n\t\tntt_creditorexternalreferenceid as string,\n\t\townerid as string,\n\t\tmodifiedon as string,\n\t\tntt_triggernotification as string,\n\t\tntt_debttypeid as string,\n\t\ttransactioncurrencyid as string,\n\t\tntt_activeregister as string,\n\t\texchangerate as string,\n\t\tmodifiedby as string,\n\t\tntt_amount_base as string,\n\t\tstatuscode as string,\n\t\towningbusinessunit as string,\n\t\tntt_breathingspacedebtid as string,\n\t\tntt_triggercreditorexpirynotification as string,\n\t\tntt_amount as string,\n\t\tcreatedby as string,\n\t\tntt_debtstatusid as string,\n\t\tntt_creditorid as string,\n\t\tntt_breathingspacemoratoriumid as string,\n\t\tntt_name as string,\n\t\towninguser as string,\n\t\tntt_nationalinsurancenumber as string,\n\t\tmodifiedonbehalfby as string,\n\t\tntt_commencementdate as string,\n\t\ttimezoneruleversionnumber as string,\n\t\tntt_expirydate as string,\n\t\tintBatchId as integer,\n\t\tpartdist as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'parquet') ~> sourceStaging\nsourceStaging derive(tsCreatedOn = toTimestamp(createdon),\n\t\ttsModifiedOn = toTimestamp(modifiedon),\n\t\tstrNTTBreathingSpaceDebtId = toString(ntt_breathingspacedebtid),\n\t\tblNTTActiveRegister = toBoolean(ntt_activeregister),\n\t\tdcNTTAmount = toDecimal(ntt_amount, 38, 4),\n\t\tstrNTTBreathingSpaceMoratoriumId = toString(ntt_breathingspacemoratoriumid),\n\t\tstrNTTCreditorId = toString(ntt_creditorid),\n\t\tstrNTTDebtTypeId = toString(ntt_debttypeid),\n\t\ttsNTTCommencementDate = toTimestamp(ntt_commencementdate),\n\t\ttsNTTActiveRegisterPeriodStartDate = toTimestamp(byName('ntt_activeregisterperiodstartdate')),\n\t\ttsNTTRemovedFromRegisterDate = toTimestamp(byName('ntt_removedfromregisterdate')),\n\t\ttsNTTRemovalDate = toTimestamp(byName('ntt_removaldate'))) ~> decolTypeConvertion\ndecolTypeConvertion derive(blIsValid = iif(isNull(tsCreatedOn) || isNull(tsModifiedOn) || isNull(strNTTBreathingSpaceDebtId) || isNull(blNTTActiveRegister) || isNull(dcNTTAmount) || isNull(strNTTBreathingSpaceMoratoriumId) || isNull(strNTTCreditorId) || isNull(strNTTDebtTypeId) || isNull(tsNTTCommencementDate) || isNull(tsNTTActiveRegisterPeriodStartDate) || isNull(tsNTTRemovedFromRegisterDate) ||\r\n(tsNTTCommencementDate < toTimestamp('1900-01-01 00:00:00') || tsNTTCommencementDate > toTimestamp('2062-08-12 00:00:00')) ||\r\n(tsNTTActiveRegisterPeriodStartDate < toTimestamp('1900-01-01 00:00:00') || tsNTTActiveRegisterPeriodStartDate > toTimestamp('2062-08-12 00:00:00')) ||\r\n(tsNTTRemovedFromRegisterDate < toTimestamp('1900-01-01 00:00:00') || tsNTTRemovedFromRegisterDate > toTimestamp('2062-08-12 00:00:00')) ||\r\n(tsNTTRemovalDate < toTimestamp('1900-01-01 00:00:00') || tsNTTRemovalDate > toTimestamp('2062-08-12 00:00:00'))\r\n,toBoolean('0'), toBoolean('1'))) ~> dcolIsValid\ndcolIsValid derive(tsCreatedOn = coalesce(tsCreatedOn, toTimestamp('1900-01-01 00:00:00')),\n\t\ttsModifiedOn = coalesce(tsModifiedOn, toTimestamp('1900-01-01 00:00:00')),\n\t\tstrNTTBreathingSpaceDebtId = coalesce(strNTTBreathingSpaceDebtId,'missing'),\n\t\tblNTTActiveRegister = coalesce(blNTTActiveRegister, toBoolean('false')),\n\t\tdcNTTAmount = coalesce(dcNTTAmount, toDecimal(0.0000, 38, 4)),\n\t\tstrNTTBreathingSpaceMoratoriumId = coalesce(strNTTBreathingSpaceMoratoriumId, 'missing'),\n\t\tstrNTTCreditorId = coalesce(strNTTCreditorId, 'missing'),\n\t\tstrNTTDebtTypeId = coalesce(strNTTDebtTypeId, 'missing'),\n\t\ttsNTTCommencementDate = iif(isNull(tsNTTCommencementDate) || (tsNTTCommencementDate < toTimestamp('1900-01-01 00:00:00') || tsNTTCommencementDate > toTimestamp('2062-08-12 00:00:00')),toTimestamp('1900-01-01 00:00:00'), tsNTTCommencementDate),\n\t\ttsNTTActiveRegisterPeriodStartDate = iif(isNull(tsNTTActiveRegisterPeriodStartDate) || (tsNTTActiveRegisterPeriodStartDate < toTimestamp('1900-01-01 00:00:00') || tsNTTActiveRegisterPeriodStartDate > toTimestamp('2062-08-12 00:00:00')),toTimestamp('1900-01-01 00:00:00'), tsNTTActiveRegisterPeriodStartDate),\n\t\ttsNTTRemovedFromRegisterDate = iif(isNull(tsNTTRemovedFromRegisterDate) || (tsNTTRemovedFromRegisterDate < toTimestamp('1900-01-01 00:00:00') || tsNTTRemovedFromRegisterDate > toTimestamp('2062-08-12 00:00:00')),toTimestamp('1900-01-01 00:00:00'), tsNTTRemovedFromRegisterDate),\n\t\ttsNTTRemovalDate = iif(isNull(tsNTTRemovalDate) || (tsNTTRemovalDate < toTimestamp('1900-01-01 00:00:00') || tsNTTRemovalDate > toTimestamp('2062-08-12 00:00:00')),toTimestamp('1900-01-01 00:00:00'), tsNTTRemovalDate)) ~> dcolMandatoryValue\ndcolMandatoryValue derive(blIsTruncate = iif(length(strNTTBreathingSpaceDebtId) > 36 || length(strNTTBreathingSpaceMoratoriumId) > 36 || length(strNTTCreditorId) > 36 || length(strNTTDebtTypeId) > 36, toBoolean('1'), toBoolean('0'))) ~> dcolIsTruncate\ndcolIsTruncate derive(strNTTBreathingSpaceDebtId = left(strNTTBreathingSpaceDebtId, 36),\n\t\tstrNTTBreathingSpaceMoratoriumId = left(strNTTBreathingSpaceMoratoriumId, 36),\n\t\tsteNTTCreditorId = left(strNTTCreditorId, 36),\n\t\tstrNTTDebtTypeId = left(strNTTDebtTypeId, 36)) ~> dcolMandatoryTruncate\ndcolMandatoryTruncate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkValidation"
		}
	}
}