{
	"name": "df_curation_validation_customaudit",
	"properties": {
		"folder": {
			"name": "Transform/BSS/References BSS"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adlsfs_parquet",
						"type": "DatasetReference"
					},
					"name": "sourceStaging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adlsfs_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkValidation"
				}
			],
			"transformations": [
				{
					"name": "decolTypeConvertion"
				},
				{
					"name": "dcolIsValid"
				},
				{
					"name": "dcolMandatoryValue"
				},
				{
					"name": "dcolIsTruncate"
				},
				{
					"name": "dcolMandatoryTruncate"
				}
			],
			"script": "source(output(\n\t\tntt_correlation as string,\n\t\tntt_breathingspacemoratoriumid as string,\n\t\towningbusinessunit as string,\n\t\tntt_customauditid as string,\n\t\tntt_name as string,\n\t\tstatecode as string,\n\t\tstatuscode as string,\n\t\tcreatedby as string,\n\t\ttimezoneruleversionnumber as string,\n\t\tntt_newvalue as string,\n\t\tntt_order as string,\n\t\tntt_attributemodifiedon as string,\n\t\townerid as string,\n\t\tmodifiedon as string,\n\t\towninguser as string,\n\t\tmodifiedby as string,\n\t\tntt_action as string,\n\t\tcreatedon as string,\n\t\tntt_displayname as string,\n\t\tntt_originalvalue as string,\n\t\tntt_breathingspacedebtorid as string,\n\t\tintBatchId as integer,\n\t\tpartdist as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'parquet') ~> sourceStaging\nsourceStaging derive(tsModifiedOn = toTimestamp(modifiedon),\n\t\ttsCreatedOn = toTimestamp(createdon),\n\t\tstrNTTCustomAuditId = toString(ntt_customauditid),\n\t\tstrNTTOriginalValue = toString(ntt_originalvalue),\n\t\tstrNTTNewValue = toString(ntt_newvalue),\n\t\tstrNTTBreathingSpaceDebtId = toString(byName('ntt_breathingspacedebtid')),\n\t\tstrNTTBreathingSpaceMoratoriumId = toString(byName('ntt_breathingspacemoratoriumid'))) ~> decolTypeConvertion\ndecolTypeConvertion derive(blIsValid = iif(isNull(strNTTCustomAuditId) || isNull(tsModifiedOn) || isNull(tsCreatedOn ), toBoolean('0'), toBoolean('1'))) ~> dcolIsValid\ndcolIsValid derive(tsModifiedOn = coalesce(tsModifiedOn, toTimestamp('1900-01-01 00:00:00')),\n\t\ttsCreatedOn = coalesce(tsCreatedOn, toTimestamp('1900-01-01 00:00:00')),\n\t\tstrNTTCustomAuditId = coalesce(strNTTCustomAuditId, 'missing'),\n\t\tstrNTTBreathingSpaceDebtId = coalesce(strNTTBreathingSpaceDebtId, 'missing'),\n\t\tstrNTTBreathingSpaceMoratoriumId = coalesce(strNTTBreathingSpaceMoratoriumId, 'missing')) ~> dcolMandatoryValue\ndcolMandatoryValue derive(blIsTruncate = iif(length(strNTTCustomAuditId) > 36 || length(strNTTBreathingSpaceDebtId) > 36 || length(strNTTBreathingSpaceMoratoriumId) > 36 || length(strNTTOriginalValue) > 255 || length(strNTTNewValue) > 255 , toBoolean('1'), toBoolean('0'))) ~> dcolIsTruncate\ndcolIsTruncate derive(strINSSDebtTypeId = left(strNTTCustomAuditId, 36),\n\t\tstrNTTBreathingSpaceDebtId = left(strNTTBreathingSpaceDebtId, 36),\n\t\tstrNTTBreathingSpaceMoratoriumId = left(strNTTBreathingSpaceMoratoriumId, 36),\n\t\tstrNTTOriginalValue = left(strNTTOriginalValue, 255),\n\t\tstrNTTNewValue = left(strNTTNewValue, 255)) ~> dcolMandatoryTruncate\ndcolMandatoryTruncate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkValidation"
		}
	}
}